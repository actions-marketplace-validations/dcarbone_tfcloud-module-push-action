name: "Push Terraform Cloud Module Version"
description: "Very quickly made action to push Terraform Module versions to a private Terraform Cloud Registry"

branding:
  icon: archive
  color: purple

inputs:
  artifact-file:
    required: true
    description: "Full path to module version artifact to upload"
  token:
    required: true
    description: "Terraform Cloud API Token with at least \"Manage Modules\" permissions."
  organization:
    required: true
    description: "Name of Terraform Cloud organization"
  namespace:
    required: true
    description: "Name of Terraform Cloud namespace"
  module-name:
    required: true
    description: "Name of module"
  provider-name:
    required: true
    description: "Name of provider used by module"
  registry-name:
    required: true
    default: "private"
    description: "Terraform Cloud registry name"
  version:
    required: true
    default: ""
    description: "Version to push. Will attempt to create from tag version if not provided."

outputs:
  errors:
    description: "Any error that occurred during version creation"
    value: '${{ steps.create.outputs.errors }}'
  version:
    description: "Module version JSON"
    value: '${{ steps.create.outputs.version }}'


runs:
  using: composite
  steps:
    - name: "Ensure jq is installed"
      uses: dcarbone/install-jq-action@v1.0.0

    - name: "Setup"
      id: setup
      shell: bash
      run: |
        if ! [ -f "${{ inputs.artifact-file }}" ]; then
         echo "Cannot locate artifact file ${{ inputs.artifact-file }}"
         exit 1
        fi
        
        _base_url='https://app.terraform.io/api/v2/organizations/${{ inputs.organization }}/registry-modules/${{ inputs.registry-name }}/${{ inputs.namespace }}/${{ inputs.module-name }}/${{ inputs.provider-name }}'
        
        echo "tfcloud_base_url=${_base_url}" >> $GITHUB_OUTPUT

    - name: "Create Module Version"
      id: create
      shell: bash
      run: |
        echo "::add-mask::${{ inputs.token }}"
        
        _version="${{ inputs.version }}"
        if [ -z "${_version}" ]; then
          _version="$(echo -n "${{ github.ref_name }}" | sed 's/^v//g')"
        fi
        
        echo "Will create version \"${_version}\"..."
        
        _url='${{ steps.setup.outputs.tfcloud_base_url}}/versions'
        
        _body="{\"data\":{\"type\":\"registry-module-versions\",\"attributes\":{\"version\":\"${_version}\"}}}"
        
        _create_resp="$(curl \
          -s \
          -X POST \
          -H 'Content-Type: application/vnd.api+json' \
          -H "Authorization: Bearer ${{ inputs.token }}" \
          --data-raw "${_body}" \
          "${_url}")"
        
        echo "version=${_create_resp}" >> $GITHUB_OUTPUT
        
        # attempt to parse upload link out of response body
        _upload_link="$(echo -n "${_create_resp}" | jq --raw-output '.data.links.upload')" 
        # if upload link not found, indicates error occurred
        if [[ "${_upload_link}" == "null" ]]; then
          echo "Error creating module version:"
          echo "errors=${_create_resp}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # mask upload link as its _kinda_ secret?
        echo "::add-mask::${_upload_link}"
        
        # attempt upload of artifact to terraform cloud
        _upload_resp="$(curl \
          -s \
          -X PUT \
          -H 'Content-Type: application/octet-stream' \
          -o /dev/null \
          -w "%{http_code}" \
          --data-binary @"${{ inputs.artifact-file }}" \
          "${_upload_link}")"
        
        # anything other than a 200 OK is bad.
        if [ "${_upload_resp}" -ne "200" ]; then
          echo "Upload errored: expected response code 200, saw ${_upload_resp}"
          echo "errors=${_upload_resp}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "Version ${_version} created successfully"
        
        exit 0
